 source("R/systemic.r", chdir=TRUE)
k <- kload('~/Dropbox/rotten.temp.k')
steps <- apply(kminimized.indices(k), 2, function(l) kstep(k, l[1], l[2]))
print(steps)

t <- 10000*365.25
p.dev <- 0.03
p.nan <- 100

cf <- function(k, ...) {
    kcalculate(k)
    i <- kintegrate(k, times=t)

    if (any(sapply(i$els, function(t) any(is.nan(t)))))
        return(NaN)

    dev <- max(sapply(1:k$nplanets, function(j) sd(i$els[[j]][,1])/median(i$els[[j]][,1])))

    merit <- K_getMinValue(k$h) * (1 + 10*dev + 10*abs(i$survival.time-t)/t)
    return(merit)
}

merit <- cf(k)
print(merit)
small <- 1
steps.no.update <- 0


quartz()

while (steps.no.update < 20) {
    print(k$chi2)
    p <- sample(1:length(steps), 1)
#    p<- 11
    v <- k['minimized']
    v2 <- v
    dv <- steps[p]
    
    v2[p] <- v[p] + dv
    
    k['minimized'] <- v2
    merit2 <- cf(k)

    v2[p] <- v[p] - dv
    k['minimized'] <- v2
    meritl <- cf(k) 
    
    if (!is.nan(merit2) && !is.nan(meritl)) {
        
        dfdx <- (merit2 - meritl)/(2.*dv)
        d2fdx2 <- (merit2 - 2*merit + meritl)/dv^2
        dx <- -dfdx/d2fdx2 * min(abs(rnorm(1)), 1)
        
        
#        v2[p] <- v[p] - sign(dfdx) * dv
        v2[p] <- v[p] + dx
        k['minimized'] <- v2

        merit2 <- cf(k)
        print(c(dfdx, dx, merit2, merit2-merit))
        
        print(merit2)
        if (!is.nan(merit2) && (merit2 < merit)) {
            merit <- merit2
            steps.no.update <- 0
        } else {
            k['minimized'] <- v
            steps.no.update <- steps.no.update+1
        }       
    }

    print(c(merit, k['minimized']-v2))
    plot(k)
    ksave(k, '~/Dropbox/test.temp.k')
}
