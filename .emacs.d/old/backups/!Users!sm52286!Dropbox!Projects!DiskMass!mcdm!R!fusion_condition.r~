# Density
rho.ice <- 0.9
# Heat capacity
c.ice <- 2.09e7
# Fusion
q.fusion <- 3.340000e+09
# Young's modulus
young.modulus <- 3e10
# Gas/ice body temperature
T <- 40
# Target temperature
target.T <- 100
# Target energy
target.energy <- c.ice*(target.T - T)
# Crack
strength.ice <- 1.43e7

kappa <- 3.5e5

xi <- 0.4

thickness <- function(R1, R2, v, rho=rho.ice) {
    stopifnot(R1 >= R2)
    
    M1 <- 4./3. * pi * R1^3 * rho
    M2 <- 4./3. * pi * R2^3 * rho
    Mr <- M1*M2/(M1+M2)
    
    thickness.f <- function(f)
             pi*young.modulus*f^2*R2^3*(1-(1-f)^2)-
             (1-xi)*Mr*v^2


    ff <- 10^seq(-8, 0, length.out=50)
    tt <- thickness.f(ff)

    f2 <- sqrt((1-xi)*Mr*v^2/(young.modulus*pi*R2^3))

    if (max(tt) < 0)
        return(list(f=NA, R.c=NA, f2=NA))
    
    f2 <- sqrt((1-xi)*Mr*v^2/(young.modulus*pi*R2^3))
    va <- uniroot(thickness.f, c(0, ff[which.max(tt)]), tol=1e-10)
    R.c <- sqrt(R2^2-(R2-va$root*R2)^2)

    return(list(f=va$root, R.c=R.c, f2=f2))
}

can.melt <- function(R1, R2, v, d=NA, R.c=NA, rho=rho.ice) {
    M1 <- 4./3. * pi * R1^3 * rho
    M2 <- 4./3. * pi * R2^3 * rho
    Mr <- M1*M2/(M1+M2)

    if (is.na(d) || is.na(R.c)) {
        coll <- thickness(R1, R2, v, rho)
        d <- coll$f * R2
        R.c <- coll$R.c
    }
    
    melt.f <- 1/2 * xi * Mr * v^2 / (target.energy * pi * R.c^2 * d * rho)

    return(melt.f)
}


can.stick <- function(R1, R2, v, d=NA, R.c=NA, rho=rho.ice) {
    if (is.na(d) || is.na(R.c)) {
        coll <- thickness(R1, R2, v, rho)
        d <- coll$f * R2
        R.c <- coll$R.c
    }
    M1 <- 4./3. * pi * R1^3 * rho
    M2 <- 4./3. * pi * R2^3 * rho
    Mr <- M1*M2/(M1+M2)
    
    tau.c <- 2*d/((1-xi)*v)
    
    heat <- 1/2 * xi * Mr * v^2 / (pi*R.c^2*d*rho)
    delta.T <- heat/c.ice
    if (delta.T + T > 273) {
        delta.T <- (heat - q.fusion)/c.ice
    }

    if (delta.T + T > 100+273)
        return(NA)

    tau.f <- 1/2 * xi*Mr*v^2*d/(kappa*delta.T*pi*R.c^2)
  
    return(tau.f < tau.c)
}

can.rebound <- function(R1, R2, v, d, R.c, rho=rho.ice) {
    
    M1 <- 4./3. * pi * R1^3 * rho
    M2 <- 4./3. * pi * R2^3 * rho
    Mr <- M1*M2/(M1+M2)
    
    return(1/2*(1-xi)*Mr*v^2/(pi*R.c^2*d) > strength.ice)
}


R1 <- 1e2
R2 <- 10^seq(-2, log10(R1), length.out=20)
v <- 10^seq(0, 6, length.out=40)

plot(range(R2), range(v), log='xy', type='n')

col.over <- 1
col.nomelt <- 2
col.vapor <- 3
col.slow <- 4
col.rebound <- 5

## printf("%e %e %e\n", 1e-2, 1e4, can.melt(R1, 1e-2, 1e4))
## printf("%e %e %e\n", 1e-1, 1e4, can.melt(R1, 1e-1, 1e4))
## printf("%e %e %e\n", 1e0, 1e4, can.melt(R1, 1e0, 1e4))
## stop()

for (RR in R2) {
    for (vv in v) {
        f <- thickness(R1, RR, vv)

        if (is.na(f$f))
            points(RR, vv, pch=19,col=col.over)
        else {
            melt <- can.melt(R1, RR, vv, f$f*RR, f$R.c)
            
            
            if (! melt >= 1) 
                points(RR, vv, pch=19, col=col.nomelt)
            else {
                stick <- can.stick(R1, RR, vv, f$f*RR, f$R.c)
                if (is.na(stick))
                    points(RR, vv, pch=19, col=col.vapor)
#                else if (!stick)
#                    points(RR, vv, pch=19, col=col.slow)
                else if (can.rebound(R1, RR, vv, f$f*RR, f$R.c))
                    points(RR, vv, pch=19, col=col.rebound)
            }
                if (can.rebound(R1, RR, vv, f$f*RR, f$R.c))
                    points(RR, vv, pch=19, col=col.rebound)
        }
        
 
    }

    i <- i +1
}

legend('topleft', legend=c('d > R', 'No melting', 'Vaporized?', 'Slow freezing', 'Rebounds'), bg='white', pch=19, col=c(col.over, col.nomelt, col.vapor, col.slow, col.rebound))
