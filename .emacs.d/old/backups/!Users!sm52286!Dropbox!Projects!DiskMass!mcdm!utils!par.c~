#include "par.h"
#include "stdarg.h"
#include "../utils/utils.h"

FILE* par_out = NULL;
FILE* par_in = NULL;

int par_argc;
char** par_argv;
bool par_help = false;
string doc_in;

void find_tilde(char* v) {
  if (v[0] == '~') {
		string v2;
		sprintf(v2, "%s%s", getenv("HOME"), v+1);
		strcpy(v, v2);
	}
}

// Initialize parameter system. Scans the command line for the --in parameter; 
// if it is specified, then reads the parameters from the file. Command line 
// toggles can override the parameters. The user can also specify the --help 
// toggle to print a table of parameters, descriptions and default values.
void par_init(int argc, char** argv) {
	char fn[500];
	par_argc = argc;
	par_argv = argv;
	
	if (argc == 2 && (!strcmp(argv[1], "-help") || !strcmp(argv[1], "-h") || !strcmp(argv[1], "--help"))) {
		par_help = true;
		argv[1] = "";
		return;
	}
	
	for (int i = 0; i < argc; i++)
		if (!strcmp(argv[i], "-in") || !strcmp(argv[i], "--in")) {
			sprintf(doc_in, "%s.txt", argv[i+1]);
			find_tilde(doc_in);
			argv[i] = "";
			argv[i+1] = "";

			par_in = fopen(doc_in, "r");
			
			if (!par_in) 
				WARNING("Could not open file specified with -in [%s], using default values", fn);
			
			IF_MASTER_PROCESS {
        sprintf(fn, "used.txt");
        par_out = fopen(fn, "w");
        if (!par_out)
          ERROR("Could not open file for parameter output");
			};
      
			
			return;
		}
		
	if (par_in == NULL) {
    IF_MASTER_PROCESS {
      par_out = fopen("used.txt", "w");
      sprintf(doc_in, "used.txt");
    }
	}
};


// Cleans up the parameter system, and checks for un-consumed command line 
// toggles. 
void par_done() {
	
	// Check if all arguments have been consumed
	for (int i = 1; i < par_argc; i++) {
		if (strcmp(par_argv[i], "")) {
			printf("Unknown parameter %s (parameter number %d)\n", par_argv[i], i);
			exit(0);
		}
	}
	
	if (par_help)
		exit(0);
};

void par_dread(double* v, char* tag, char* desc) {
	char line[MAX_LINE];
	char format[MAX_LINE];

	
	if (strchr(tag, '.') != NULL)
		tag = strchr(tag, '.')+1;
	if (strchr(tag, '>') != NULL)
		tag = strchr(tag, '>')+1;
	
	
	if (par_help) {
		printf("-%s: %s\n", tag, desc);
		return;
	}
	
	sprintf(line, "--%s", tag);
	bool found = false;
	for (int i = 1; i < par_argc; i+=2) {
		if (!strcmp(line, par_argv[i]) || !strcmp(line+1, par_argv[i])) {
			if (i + 1 == par_argc)
				ERROR("Missing parameter value for %s", tag);
			
			*v = atof(par_argv[i+1]);
			par_argv[i] = "";
			par_argv[i+1] = "";			
			
			found = true;
			break;
		}
	}
	
	if (par_in != NULL && !found) { 
		sprintf(format, "%s %%le", tag);
	
		fseek(par_in, 0, SEEK_SET);
	
		while (fgets(line, MAX_LINE, par_in) != NULL) {
			double r;
			int nr = sscanf(line, format, &r);
			if (nr > 0) {
				*v = r;
				break;
			}
		}
	}	

	IF_MASTER_PROCESS {
    sprintf(format, "%-20s %-20e", tag, *v);
    sprintf(line, "%-50s # %s\n", format, desc);
    fputs(line, par_out);
    fflush(par_out);
    printf("%s = %e\n", tag, *v);
    fflush(stdout);
  };
}

void par_lread(long* v, char* tag, char* desc) {
	char line[MAX_LINE];
	char format[MAX_LINE];
	
	if (strchr(tag, '.') != NULL)
		tag = strchr(tag, '.')+1;
	if (strchr(tag, '>') != NULL)
		tag = strchr(tag, '>')+1;
	
	if (par_help) {
		printf("-%s: %s\n", tag, desc);
		return;
	}
	sprintf(line, "--%s", tag);
	bool found = false;
	for (int i = 1; i < par_argc; i+=2) {
		if (!strcmp(line, par_argv[i]) || !strcmp(line+1, par_argv[i])) {
			if (i + 1 == par_argc)
				ERROR("Missing parameter value for %s", tag);
			*v = atol(par_argv[i+1]);
			
			par_argv[i] = "";
			par_argv[i+1] = "";
			found = true;
			break;
		}
	}
	
	if (par_in != NULL && !found) { 
		sprintf(format, "%s %%ld", tag);
	
		fseek(par_in, 0, SEEK_SET);
	
		while (fgets(line, MAX_LINE, par_in) != NULL) {
			long r;
			int nr = sscanf(line, format, &r);
			if (nr > 0) {
				*v = r;
				break;
			}
		}
	}	

  IF_MASTER_PROCESS {
    sprintf(format, "%-20s %-20ld", tag, *v);
    sprintf(line, "%-50s # %s\n", format, desc);
    fputs(line, par_out);
    fflush(par_out);
    printf("%s = %ld\n", tag, *v);	
    fflush(stdout);
  }
}

void par_sread(string v, char* tag, char* desc) {
	char line[MAX_LINE];
	char format[MAX_LINE];
	
	if (strchr(tag, '.') != NULL)
		tag = strchr(tag, '.')+1;
	if (strchr(tag, '>') != NULL)
		tag = strchr(tag, '>')+1;
	
	if (par_help) {
		printf("-%s: %s\n", tag, desc);
		return;
	}
	sprintf(line, "--%s", tag);
	bool found = false;
	for (int i = 1; i < par_argc; i+=2) {
		if (!strcmp(line, par_argv[i]) || !strcmp(line+1, par_argv[i])) {
			if (i + 1 == par_argc)
				ERROR("Missing parameter value for %s", tag);
			strcpy(v, par_argv[i+1]);
			
			par_argv[i] = "";
			par_argv[i+1] = "";
			found = true;
			break;
		}
	}
	
	if (par_in != NULL && !found) { 
		sprintf(format, "%s %%s", tag);
	
		fseek(par_in, 0, SEEK_SET);
	
		while (fgets(line, MAX_LINE, par_in) != NULL) {
			string r;
			int nr = sscanf(line, format, &r);
			if (nr > 0) {
				strcpy(v, r);
				break;
			}
		}
	}	
	find_tilde(v);
	
  IF_MASTER_PROCESS {
    sprintf(format, "%-20s %-20s", tag, v);
    sprintf(line, "%-50s # %s\n", format, desc);
    fputs(line, par_out);
    fflush(par_out);
	
  
    printf("%s = %s\n", tag, v);	

    fflush(stdout);
  }
}
