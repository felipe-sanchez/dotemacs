_.clone = function(obj) {
    if (obj === undefined)
        return obj;
    return JSON.parse(JSON.stringify(obj));
};

_.parameter = function(name) {
  return(decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search)||[,""])[1].replace(/\+/g, '%20'))||null);
};



// Logic
var ADS = (function() {
    var module = {};
    
    var cache = {};
    var queue = [];

    // Template URL
    var adsUrl = "ads.php?";
    var adsParameters = "keywords=<%= keywords %>&year1=<%= year1 %>&month1=<%= month1 %>&year2=<%= year2 %>&month2=<%= month2 %>";
     
    function adsCountResults(keywords, fromYear, toYear, monthResolution, delay, callback, progresscallback) {
        if (12 % monthResolution != 0)
            throw { message: "12 should be divisible by monthResolution"};

        var urls = [];
        var counts = [];
        var dates = [];
        var key = JSON.stringify([keywords, fromYear, toYear, monthResolution]);

        if (cache[key]) {
            callback(cache[key]);
            return;
        }
        var urlPars;

        // Construct a list of URLs to query ADS with. We divide the time span
        // between fromYear and toYear by monthResolution months. Each url gets queued
        // and then processed with a delay.
        for (var year = fromYear; year <= toYear; year++) {
            for (var month = 1; month <= 12; month += monthResolution) {
                urlPars = _.template(adsParameters, { keywords: keywords, year1: year, month1: month,
                                                year2: year, month2: month + monthResolution - 1 });

                urls.push(adsUrl + encodeURI(urlPars));
                
                var date = Date.UTC(year, month, 1);
                dates.push(date);
                counts.push([date, NaN]);
            }
        }

        // Callback that is called after all urls have been processed
        var wcallback = _.after(urls.length, function() {
            // Cache result
            cache[key] = counts;
            callback(counts, urls);
        });

        var completed = 0;
        
        // Scans each URL...
        _.each(urls, function(url, index) {
            // After the specified delay, use jQuery get to download page
            _.delay(function() {
               $.get(url, function(page) {
                   // Match regex and extract count
                   var re = /Total number selected: <strong>(\d+)<\/strong>/;
                   var count = re.exec(page);
                   if (count != null && count.length > 0) {
                       counts[index] = [dates[index], +count[1]];
                   } else {
                       re = /Selected and retrieved <strong>(\d+)<\/strong>/;
                       count = re.exec(page);
                       if (count != null && count.length > 0) {
                           counts[index] = [dates[index], +count[1]];
                       } else {
                           counts[index] = [dates[index], 0];
                       }
                   }
                   wcallback();
                   completed ++;
                   progresscallback(completed/urls.length);
               });
           }, delay * index);
        });
    }
    module.adsCountResults = adsCountResults;

    return module;
})();


// User interface part
var ADS_TRENDS_UI = (function() {
    var module = {};
    var nkeywords = 5;
    var adsDelay = 500;
    var plotter;
    var baseURL = "http://www.stefanom.org/playpen/Trends/keywords/keywords.php";
    var defaultKeywords = ['Exoplanet, Extrasolar planet', 'Extragalactic', 'Globular Clusters',
                          'Black holes', 'Dark Matter', 'CMB', 'Monte Carlo', 'Machine Learning',
                          'Kepler', 'Nonlinear', 'N-Body', 'Cosmology', 'Dark Energy', 'SPH',
                          'Exomoon', 'Exoplanet atmosphere', 'Habitable planet', 'Bootstrap'];
    var colors = ['rgb(92, 184, 92)', 'rgb(240, 173, 78)', 'rgb(217, 83, 79)', 'rgb(91, 192, 222)', '#428bca'];
    var data = [];
    var last_keywords = [];

    
    function share() {
        var text = baseURL + "?year1=" + $("#year1").val() + "&year2=" + $("#year2").val();
        for (var i = 1; i <= nkeywords; i++)
            if ($("#keyword" + i).val().trim() != "")
                text += "&keyword" + i + "=" + encodeURI($("#keyword" + i).val());

        if ($("#show-all").is(":checked"))
            text += "&show-all=true";
        
        $("#share").val(text);
    }
    
    function sync() {
        var plotter = $("#plot").highcharts();
        for (var i = 1; i <= nkeywords; i++) {
            $("#keyword" + i + "-prog").html($("#keyword" + i).val());
            plotter.series[i-1].name = $("#keyword" + i) .val();
        };

        if ($("#show-all").is(":checked")) {
            $("#keyword5-prog").html("Total count");
            plotter.series[4].name = "Total count";
            plotter.series[4].show();
        } else {
            $("#keyword5-prog").html("");
            plotter.series[4].hide();
        }
        share();
    }

    function sampleKeywords(num) {
        num = num || 4;
        console.log(num);
        var initKeywords = _.sample(defaultKeywords, num);
        var i;

        for (i = 1; i <= num; i++)
            $("#keyword" + i).val(initKeywords[i-1]);
        sync();
    }
    
    function disable() {
        $("#params :input").prop("disabled", true);
        $("#plot-options :button").prop("disabled", true);
    }

    function enable() {
        $("#params :input").prop("disabled", false);
        $("#plot-options :button").prop("disabled", false);
    }

    function render(index, counts, urls) {
        var plotter = $("#plot").highcharts();
        data[index-1] = _.clone(counts);
        plotter.series[index-1].setData(_.clone(counts), true);

        $("#keyword" + index + "-badge").html(
            _.reduce(counts, function(memo, c) { return memo + c[1]; }, 0)
        );
        
        enable();
    }

    function keywords() {
        return _.map(_.range(1, nkeywords+1), function(i) {
            return $("#keyword" + i).val();
        });
    }

    function years() {
        return [$("#year1").val(), $("#year2").val()];
    }

    function progress(i, v) {
        v = Math.min(20, Math.ceil(20*v));
        $("#keyword" + i + "-prog").css("width", v + "%");
    }


    var logOn = false;
    var normalizeState = 0;

    function log() {
        var plotter = $("#plot").highcharts();
        
        if (logOn) 
            plotter.yAxis[0].update({type: "logarithmic", min:null});
        else {
            plotter.yAxis[0].update({type: "linear", min:0});
            replot();
        }
    }

    function normalize(num) {
        normalizeState = num;

        if (num == 0) {
            replot();            
            return;
        }
        var plotter = $("#plot").highcharts();
        
        var data0 = _.clone(data[num-1]);
        for (var i = nkeywords-1; i >= 0; i--) {
            var data2 = _.clone(data[i]);
            var newData = [];
            if (data2) {
                
                for (var j = 0; j < data2.length; j++) {
                    if (data0[j][1] > 0) {
                        data2[j][1] /= data0[j][1];
                        newData.push(data2[j]);
                    }
                }
                plotter.series[i].setData(newData, true);
            }
        }
    }


    function toggleLog() {
        logOn = !logOn;
        log();
    }

    function replot() {
        
        for (var i = 1; i <= nkeywords; i++) {
            if (last_keywords[i-1].trim() === "")
                plotter.series[i-1].hide();
            else {
                plotter.series[i-1].show();
                plotter.series[i-1].setData(_.clone(data[i-1]));
            }
        }
    }


    function update() {
        disable();
        var kw = keywords();
        last_keywords = kw;
        var y = years();
        var plotter = $("#plot").highcharts();

        for (var i = 1; i <= nkeywords; i++) {
            if (kw[i-1].trim() === "")
                plotter.series[i-1].hide();
            else {
                plotter.series[i-1].show();
                ADS.adsCountResults(kw[i-1], +y[0], +y[1], 12, adsDelay, _.partial(render, i), _.partial(progress, i));
            }
        }

        sync();
    }
    
    function initUI() {
        // Initialize plot
        
        $("#plot").highcharts({
            chart: {
                type: 'line'
            },
            title: { text: 'Keyword popularity' },           
            xAxis: {
                title: { text: 'Years' },
                type: 'datetime'
            },
            yAxis: {
                title: { text: 'Number of articles'},
                min:0,
                type: 'linear'
            },
            chart: {
                zoomType: 'xy'
            },
            series: [
                {
                    color: colors[0],
                    name: ""
                },
                {
                    color: colors[1],
                    name: ""
                },
                {
                    color: colors[2],
                    name: ""
                },
                {
                    color: colors[3],
                    name: ""
                },
                {
                    color: colors[4],
                    name: ""
                }
                
            ],
           legend: {
               enabled:false
           },
            tooltip: {
                formatter: function() {
                    
                 var val = this.y.toPrecision(5);
                    
                 return Highcharts.dateFormat("%Y", this.x) + "<br><span style=\"color:" + this.series.color + ">"+ this.series.name + "</span>: <b>" + val + "</b><br/>";
             }

            }
        });

        $("#inspire").on("click", function() { sampleKeywords(); });
        $("#update").on("click", update);

        $("#log").on("click", toggleLog);
        $("#normalize").prop("disabled", true);
        $("#log").prop("disabled", true);
        $("#share").on("click", function() {
           $(this).select();
        });
        
        var i;
        for (i = 1; i <= nkeywords; i++) {
            $("#keyword" + i).on("input propertychange paste", sync);
            $("label[for=keyword" + i + "]").css("border-bottom", "4px solid " + colors[i-1]);
        }
        $("label[for=show-all]").css("border-bottom", "4px solid " + colors[4]);
        
        $("#show-all").on("click", sync);
        
        
        if (_.parameter('keyword1')) {
            for (i = 1; i <= nkeywords; i++)
                $("#keyword" + i).val(_.parameter('keyword' + i) || "");
            $("#year1").val(_.parameter('year1') || "1988");
            $("#year2").val(_.parameter('year2') || "2013");
            if (_.parameter('show-all'))
                $("#show-all").attr('checked', true);
            sync();
        } else {
            sampleKeywords(2);
        }
    };
    module.initUI = _.once(initUI);
    module.normalize = normalize;
    return module;
})();

$(document).ready(ADS_TRENDS_UI.initUI);
